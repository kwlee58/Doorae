presence
presence<-factor(ifelse(class.roll$ID %in% lab.presence$ID, "present", "absent"), levels=c("present", "absent"))
presence
class.roll.2<-data.frame(class.roll, presence=presence)
class.roll.2
attach(class.roll.2)
detach()
table(class.roll.2$group, class.roll.2$presence)
substr(class.roll$name, 1, 6)
substr(class.roll$name, 1, 2) ==  "김"
substr(class.roll$name, 1, 2)
substr(class.roll$name, 1, 1)
substr(class.roll$name, 1, 1) == "김"
(substr(class.roll$name, 1, 1) == "김")[red.id]
list(red=class.roll$name[sort(red.id)], black=class.roll$name[sort(black.id)])
kim.id<-substr(class.roll$name, 1, 1)=="김"
kim.id
kim.id[red.id]
kim.id[black.id]
kim<-factor(ifelse(kim.id, "kim", "else"), levels=c("kim", "else"))
table(class.roll$group, kim)
table(class.roll$group, kim, dnn=NULL)
lee.id<-substr(class.roll$name, 1, 1)=="이"
lee<-factor(ifelse(lee.id, "lee", "else"), levels=c("lee", "else"))
table(class.roll$group, lee, dnn=NULL)
table(class.roll$group, kim, lee, dnn=NULL)
ftable(table(class.roll$group, kim, lee, dnn=NULL))
class.roll$name[lee.id]
class.roll$name[lee.id][red.id]
class.roll$name[red.id & lee.id]
red.id
lee.id
data.frame(class.roll, lee)
plot(ecdf(class.roll$n.accesses[red.id]), col="red",main="표본누적분포함수")
savehistory(file="red_black1501.Rhistory")
lines(ecdf(class.roll$n.accesses[black.id]), pch=15)
tapply(class.roll$n.accesses,class.roll$group,summary)
red.id<-sample(1:71, size=35)
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
red.id<-sample(1:71, size=35)
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
red.id<-sample(1:71, size=35)
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
red.id<-sample(1:71, size=35)
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
red.id<-sample(1:71, size=35)
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
red.id<-sample(1:71, size=35)
tapply(class.roll$n.accesses,class.roll$group,summary)
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
red.id<-sample(1:71, size=35)
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
red.id<-sample(1:71, size=35)
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
red.id<-sample(1:71, size=35)
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
ls()
load("red_black.rda")
red.id
tapply(class.roll$n.accesses,class.roll$group,summary)
class.roll.1105
red.id.1105<-which(class.roll.1105$group == "red")
black.id.1105<-which(class.roll.1105$group == "black")
lee.tf<-substr(class.roll$name, 1, 1) == "이"
table(lee.tf, class.roll.1105$group)
table(class.roll.1105$group, lee.tf)
red.id<-red.id.1105
black.id<-black.id.1105
class.roll$group<-factor(ifelse((1:71) %in% red.id, "red", "black"), levels=c("red", "black"))
tapply(class.roll$n.accesses,class.roll$group,summary)
plot(ecdf(class.roll$n.accesses[red.id]), col="red",main="표본누적분포함수")
lines(ecdf(class.roll$n.accesses[black.id]), pch=15)
kim.id<-substr(class.roll$name, 1, 1)=="김"
kim.id
kim.id<-which(substr(class.roll$name, 1, 1)=="김")
kim.id
kim<-substr(class.roll$name, 1, 1)=="김"
kim.fac<-factor(ifelse(kim, "kim", "else"), levels=c("kim", "else"))
lee<-substr(class.roll$name, 1, 1)=="이"
lee.fac<-factor(ifelse(lee.id, "lee", "else"), levels=c("lee", "else"))
table(class.roll$group, kim.fac)
table(class.roll$group, kim.fac, dnn=NULL)
table(class.roll$group, lee.fac)
table(class.roll$group, lee.fac, dnn=NULL)
getwd()
save(file="random_id.rda", c("red.id", "black.id"))
ls()
save(file="random_id.rda", list=c("red.id", "black.id"))
?load
?ks.test
ks.test(class.roll$n.accesses[red.id], class.roll$n.accesses[black.id]))
ks.test(class.roll$n.accesses[red.id], class.roll$n.accesses[black.id])
t.test(class.roll$n.accesses[red.id], class.roll$n.accesses[black.id])
t.test(class.roll$n.accesses[red.id], class.roll$n.accesses[black.id], var.equal=T)
t.test(class.roll$n.accesses[red.id], class.roll$n.accesses[black.id], var.equal=T)
t.test(class.roll$n.accesses[red.id], class.roll$n.accesses[black.id], var.equal=T)$statistic
t.test(class.roll$n.accesses[red.id], class.roll$n.accesses[black.id], var.equal=T)$variance
wilcox.test(class.roll$n.accesses[red.id], class.roll$n.accesses[black.id], var.equal=T)
?unique
duplicated(class.roll$n.accesses)
class.roll$n.accesses[duplicated(class.roll$n.accesses)]
unique(class.roll$n.accesses[duplicated(class.roll$n.accesses)])
x<-vector()
x
x<-vector(numeric, 10)
?vector
x<-vector(mode="numeric", length=10)
x
attributes(class.roll)
names(class.roll)
dimnames(class.roll)
dim(class.roll)
ls()
rm(x)
ls()
result
search()
library(markdown)
library(knitr)
?rpubsUpload
rpubsUpload(title="Red and Black Randomization Experiment", htmlFile="Randomization.html", id=result$id)
rpubsUpload(title="Red and Black Randomization Experiment", htmlFile="Randomization.html", id=result$id)
rpubsUpload(title="Red and Black Randomization Experiment", htmlFile="Randomization.html", id=result$id)
help(package=markdown)
markdown::render("Randomization.Rmd")
?render
library(rmarkdown)
render("Randomization.Rmd")
rpubsUpload(title="Red and Black Randomization Experiment", htmlFile="Randomization.html", id=result$id)
rpubsUpload(title="Red and Black Randomization Experiment", htmlFile="Randomization.html", id=result$id)
result.2<-rpubsUpload(title="Red and Black Randomization Experiment", htmlFile="Randomization.html", id=result$id)
result.2<-rpubsUpload(title="Red and Black Randomization Experiment", htmlFile="Randomization.html", id=result$id)
result.2<-rpubsUpload(title="Red and Black Randomization Experiment", htmlFile="Randomization.html", id=result$id)
result.2
getwd()
ls()
save(file="red_black150408.rda", list=ls())
savehistory("red_black150408.Rhistory")
red.black
str(red.black)
red.black$Color<-factor(red.black$Color, levels=c("Curitiba", "Veja"))
str(red.black)
red.black$Q6_1<-factor(red.black$Q6_1, levels=c("Male", "Female"))
red.black$Q6_2<-factor(red.black$Q6_1, levels=c("Glasses", "No.Glasses"))
red.black$Q6_1<-factor(red.black$Q6_1, levels=c("Male", "Female"))
red.black<-read.table("red_black.txt", header=TRUE, sep="")
str(red.black)
red.black.2<-red.black
red.black.2$Color<-factor(red.black.2$Color, levels=c("Curitiba", "Veja"))
red.black.2$Q6_1<-factor(red.black.2$Q6_1, levels=c("Male", "Female"))
red.black.2$Q6_2<-factor(red.black.2$Q6_2, levels=c("Glasses", "No.Glasses"))
red.black.2$Q6_4<-factor(red.black.2$Q6_4, levels=c("Seoul", "Gyunggi", "Kangwon", "Other"))
red.black.2
red.black.2<-red.black
red.black.2$Color<-factor(red.black.2$Color, levels=c("Curitiba", "Veja"))
red.black.2
red.black.2$Q6_1<-factor(red.black.2$Q6_1, levels=c("1", "2"), labels=c("Male", "Female"))
red.black.2$Q6_2<-factor(red.black.2$Q6_2, levels=c("1", "2"), labels=c("Glasses", "No.Glasses"))
red.black.2$Q6_4<-factor(red.black.2$Q6_4, levels=1:4, labels=c("Seoul", "Gyunggi", "Kangwon", "Other"))
red.black.2
str(red.black.2)
save(file="red_black150408.rda", list=ls())
savehistory("red_black150408.Rhistory")
names(class.roll)
names(class.roll,2)
names(class.roll.2)
getwd()
setwd("~/")
getwd()
ls()
rm(list=ls())
load(".RData")
ls()
mydata
save(file="anscombe.rda", list=ls())
q("no")
q("no")
?rapply
ls()
m<-matrix(c(1:10, 11:20), nrow=10, ncol=2)
m
apply(m, 1, mean)
apply(m, 2, mean)
colMeans(m)
rowMeans(m)
apply(m, 2, function(x) x/2)
attach(iris)
head(iris)
str(iris)
by(iris[, 1:4], Species, colMeans)
?new.env
e<-new.env()
e$a<-1:10
e$b<-11:20
eapply(e, mean)
l<-list(a=1:10, b=11:20)
l.mean<-sapply(l, mean)
class(l.mean)
l.mean[["a"]]
l.mean
l.mean<-sapply(l, fivenum)
l.
l.fivenum<-sapply(l, fivenum)
l.fivenum
l.fivenum<-vapply(l, fivenum, c(Min=0, Q1=0, Med=0, Q3=0, Max=0))
l.fivenum
?vapply
replicate(5,rnorm(10))
?replicate
replicate(5,rnorm(10), simplify=T)
?replciate
?replicate
?rapply
l
rapply(l, log2)
rapply(l, log2, how="list")
rapply(l, log2, how="replace")
?rapply
rapply(l, log2, how="unlist")
?rapply
apply(state.x77, 1, median)
str(state.x77)
apply(state.x77, 2, median)
tapply(state.x77, state.region, median)
state.region
by(state.x77, state.region, median)
by(state.x77, by=factor(state.region), median)
?by
str(state.region)
by(state.x77, state.region, mean)
state.x77
aggregate(state.x77, state.region, mean)
aggregate(state.x77, list(state.region), mean)
aggregate(state.x77, list(state.region), median)
aggregate(state.x77, list(region=state.region), median)
tapply(state.x77$Population, state.region, median)
tapply(state.x77[,1], state.region, median)
by(state.x77[,1:1], state.region, median)
by(state.x77[,1:2], state.region, median)
by(state.x77[,2], state.region, median)
?by
by(as.data.frame(state.x77), state.region, median)
by(data.frame(state.x77), state.region, median)
by(data.frame(state.x77), state.region, median, drop=TRUE)
by(state.x77, state.region, median, drop=TRUE)
is.na(state.x77)
which(is.na(state.x77))
?by
?by
by(state.x77, state.region, class)
by(state.x77, state.region, mean)
tapply(state.x77[,1], state.region, mean)
tapply(state.x77[,2], state.region, mean)
tapply(state.x77[,2], state.division, mean)
by(state.x77[,2], state.division, mean)
aggregate(state.x77, list(state.division), mean)
by(state.x77[,2], INDICES=state.division, mean)
by(state.x77, INDICES=state.division, mean)
aggregate(state.x77, list(state.division), summary)
by(state.x77, state.region, summary)
by(state.x77, state.region, mean)
by(state.x77, state.region, summary)
by(state.x77, state.region, mean, trim=5)
by(state.x77[, 1:3], state.region, mean, trim=5)
class(state.x77)
by(data.frame(state.x77[, 1:3]), state.region, mean, trim=5)
by(data.frame(state.x77[, 1:3]), state.region, mean)
?by
aggregate(state.x77, list(state.division), mean)
aggregate(state.x77, list(division=state.division), mean)
aggregate(state.x77, list(Division=state.division), mean)
aggregate(state.x77, list(Division=state.division), summary)
aggregate(state.x77, list(Division=state.division), function(x) summary(x)[c(2,4))
aggregate(state.x77, list(Division=state.division), function(x) summary(x)[c(2,4)])
aggregate(state.x77, list(Division=state.division), function(x) summary(x)[c(2,3)])
aggregate(state.x77, list(Division=state.division), function(x) summary(x)[c(2,5)])
aggregate(state.x77, list(Division=state.division), function(x) summary(x)[5]-summary(x)[2])
aggregate(state.x77, list(Division=state.division), function(x) {list(mean=mean(x), sd=sd(x))})
warbreaks
?by
warpbreaks
str(warpbreaks)
warpbreaks[,1:2]
by(warpbreaks[,1:2], warpbreaks[,3], summary)
by(warpbreaks[,1:2], warpbreaks[,3], mean)
by(warpbreaks[,1], warpbreaks[,3], mean)
by(warpbreaks[,1], warpbreaks[,-1], mean)
tapply(warpbreaks[,1], warpbreaks[,-1], mean)
by(warpbreaks, warpbreaks[,-1], function(x) lm(breaks~wool, datat=x))
by(warpbreaks, warpbreaks[,3], function(x) lm(breaks~wool, data=x))
tmp<-by(warpbreaks, warpbreaks[,3], function(x) lm(breaks~wool, data=x))
sapply(tmp, coef)
coef(tmp)
coef(tmp$H))
coef(tmp$H)
?coef
by(data.frame(state.x77[, 1:3]), state.region, colMeans)
by(state.x77, state.region, colMeans)
by(state.x77, state.region, function(x) apply(x, 2, median))
by(state.x77, state.region, function(x) apply(x, 2, median))
options(width=132)
by(state.x77, state.region, function(x) apply(x, 2, median))
install.packages("plyr", repos="http://cran.rstudio.com")
library(plyr)
install.packages("data.table", repos="http://cran.rstudio.com")
library(reshape2)
sapply(1:5, rnorm(3,x))
sapply(1:5, function(x) rnorm(3,x))
sapply(1:5, function(x) matrix(x, 2, 2)))
sapply(1:5, function(x) matrix(x, 2, 2))
mpply(sum, 1:5, 1:5, 1:5)
mapply(sum, 1:5, 1:5, 1:5)
mapply(rep, 1:4, 4:1))
mapply(rep, 1:4, 4:1)
Map(sum, 1:5, 1:5, 1:5)
?Map
mapply(sum, 1:5, 1:5, 1:5)
?mean
Name<-rep(c("Aira", "Ben", "Cat"), each=3)
Name
Month<-rep(1:3, 3)
Month
Rate1<-c(12,18,19,53,22,19,22,67,45)
Rate1
Rate2<-c(23,73,45,19,87,45,87,43,32)
df<-data.frame(Name=Name, Month=Month, Rate1=Rate1, Rate2=Rate2, stringsAsFactors=TRUE)
df
str(df)
by(df[, 3:4], Name, mean)
by(df[, 3:4], Name, colMeans)
aggregate(df[, 3:4], Name, mean)
aggregate(df[, 3:4], list(Name), mean)
df.by<-by(df[, 3:4], Name, colMeans)
str(df.by)
sapply(df.by, print)
sapply(df.by, summary))
sapply(df.by, summary)
sapply(df.by, rbind)
sapply(df.by, cbind)
period<-c(rep(1,6), rep(2,2))
stage<-c(rep(1,3), rep(2,3), rep(1,2))
wage_accepted<-c(25, 19, 15, 32, 13, 14, 17, 12)
d<-data.frame(period=period, stage=stage, wage=wage_accepted)
tapply(d[,3]), d[,1:2], mean)
tapply(d[,3]), list(factor(d[,1], factor(d[,2]), mean)
tapply(d[,3], list(factor(d[,1]), factor(d[,2])), mean)
tapply(d[,3], list(period=factor(d[,1]), stage=factor(d[,2])), mean)
ls()
d
str(d)
aggregate(d[,3], list(period=period, stage=stage), mean)
by(d[,3], list(period=period, stage=stage), mean)
summary(by(d[,3], list(period=period, stage=stage), mean))
print(by(d[,3], list(period=period, stage=stage), mean))
sapply(by(d[,3], list(period=period, stage=stage), print))
sapply(by(d[,3], list(period=period, stage=stage), print)
)
sapply(by(d[,3], list(period=period, stage=stage), mean)print)
sapply(by(d[,3], list(period=period, stage=stage), mean), print)
by(iris[, 1:4], species, colMeans)
attach(iris)
by(iris[, 1:4], species, colMeans)
by(iris[, 1:4], Species, colMeans)
sapply(by(iris[, 1:4], Species, colMeans), print)
orange
Orange
X<-array(1:24, dim=4:2)
X
apply(X, 1, sum)
apply(X, 1:2, sum)
apply(X, 2, sum)
apply(X, 3, sum)
sweep(X, 1, apply(X, 1, mean))
apply(X, 1, mean)
X
Orange[2:3]
str(Orange)
by(Orange[2:3], Orange[1], mean)
by(Orange[2:3], Orange[1], colMeans)
rbind(by(Orange[2:3], Orange[1], colMeans))
do.call("rbind", by(Orange[2:3], Orange[1], colMeans))
Orange
aggregate(Orange[2:3], Orange[1], mean)
split(Orange[2:3], Orange[1])
env<-new.env()
env$x<-1:3
env$y<-4:6
eapply(env, sum)
ls()
l.fivenum
str(apply)
str(lapply)
str(sapply)
str(mapply)
str(tapply)
str(X)
d
tapply(d["wage"], list(period=period, stage=stage))
tapply(d["wage"], list(period=factor(period), stage=factor(stage)))
tapply(d["wage"], list(period=factor(period), stage=factor(stage)), mean)
d["wage"]
d
tapply(d["wage"], d["period"], mean)
d["wage"]
d["period"]
tapply(d["wage"], factor(d["period"]), mean)
factor(d["period"])
as.factor(d["period"])
as.factor(d[, 1])
as.factor(d[, "period"])
tapply(d["wage"], as.factor(d[,"period"]), mean)
tapply(d[,"wage"], as.factor(d[,"period"]), mean)
tapply(d[,"wage"], as.factor(d[,"period"]))
length(d["wage"])
length(d["period"])
length(as.factor(d["period"]))
length(factor(d["period"]))
str(d["wage"])
str(d[,"wage"])
str(d[,3])
tapply(d[,"wage"], as.factor(d[,"period"]))
tapply(d["wage"], as.factor(d[,"period"]))
tapply(d[,"wage"], as.factor(d[,"period"]))
tapply(d[,"wage"], as.factor(d[,"period"]), mean)
tapply(d[,"wage"], list(as.factor(d[,"period"]), as.factor(d[,"stage"])), mean)
apply(state.x77, 2, function(x) c(median(x), max(x)))
apply(state.x77, 2, function(x) c(median=median(x), max=max(x)))
apply(state.x77, 2, function(x) c(median=median(x), mean=mean(x)))
system.time(for(j in 1:20000) colMeans(state.x77))
system.time(for(j in 1:20000) apply(state.x77, 2, mean))
system.time(for(j in 1:20000) for (i in 1:8) mean(state.x77[, i]))
which(c(F,F,T,F,T,T,F))
a<-matrix(c(5,2,7,1,2,8,4,5,6),3,3)
apply(a, 1, function(x) which(x == min(x)))
a
barley
library(lattice)
dim(barley)
lapply(barley, function(x) length(unique(x)))
sapply(barley, function(x) length(unique(x)))
apply(barley, 2, function(x) length(unique(x)))
str(barley)
tapply(barley$yield, barley$site, mean)
barley$site
str(barley)
barley["yield"]
barley[["yield"]]
barley$yield
barley[,"yield"]
str(barley["yield"])
str(barley[["yield"]])
["yield"]
"yield"
`[`"yield"
[["yield"]]
str(barley[["yield"]])
?`[
`
?`[`
?`[`
barley["yield"]
barley[["yield"]]
str(barley["yield"])
str(barley[,"yield"])
str(barley[c("yield", "site")])
str(barley[[c("yield", "site")]])
str(barley[["yield"]])
str(barley$yield)
is.list(barley)
is.matrix(barley)
is.data.frame(barley)
barley[["yield", exact=TRUE]]
g<-"My First List"
h<-c(25, 26, 18, 39)
k<-c("one", "two", "three")
mj<-matrix(1:10, nrow=5)
j<-matrix(1:10, nrow=5)
rm("mj")
j
mylist<-list(title=g, ages=h, j, k)
mylist[["ages"]]
mylist["ages"]
mylist[[2]]
mylist
mylist[[3]]
mylist[[3]][1,2]
mylist[[4]][1]
mylist["one"]
mylist["title"]
mylist[["title"]]
str(mylist["title"])
str(mylist[["title"]])
str(mylist["ages"])
str(mylist[["ages"]])
mylist[[2]]
getElement(mylist, ages)
getElement(mylist, "ages")
getElement(mylist, [[3]])
Raw
ls()
getwd()
save(file="apply.rda", list=ls())
savehistory("apply.Rhistory")
